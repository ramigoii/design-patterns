How SOLID principles are applied in my project.

✅ 1. Single Responsibility Principle (SRP)
    Each class has only one reason to change:
    strategy.CardioTraining, strategy.StrengthTraining, and strategy.HybridTraining define only workout strategies.
    observer.User represents an observer (subscriber).
    core.TrainingProgram manages subscribers and notifications.
    decorator.WarmUpDecorator and decorator.CoolDownDecorator modify training behavior.
    There’s no class doing too much, ensuring maintainability.
✅ 2. Open/Closed Principle (OCP)
    The project allows extensions without modifying existing classes:
    We can add new training strategies without modifying the existing strategy classes.
    We can add new decorators (e.g., "High-Intensity Boost") to extend training behavior dynamically.
    core.TrainingProgram allows adding more observers without modifying its internal logic.
✅ 3. Liskov Substitution Principle (LSP)
    Subtypes can replace their base type without breaking functionality:
    strategy.TrainingStrategy interface ensures that all strategies (strategy.CardioTraining, strategy.StrengthTraining, strategy.HybridTraining) can be used interchangeably.
    decorator.TrainingDecorator extends strategy.TrainingStrategy, so any decorated workout still behaves like a valid strategy.
✅ 4. Interface Segregation Principle (ISP)
    No class is forced to implement unnecessary methods:
    The system uses small, focused interfaces (strategy.TrainingStrategy, observer.Observer), preventing unnecessary dependencies.
    If we added more functionality (e.g., "Logging" or "Progress Tracking"), we could create separate interfaces instead of bloating existing ones.
✅ 5. Dependency Inversion Principle (DIP)
    High-level modules depend on abstractions, not concrete implementations:
    core.TrainingProgram depends on observer.Observer, not concrete classes like observer.User.
    strategy.TrainingStrategy allows the main class to work with any strategy implementation, making it loosely coupled.
    decorator.TrainingDecorator ensures that modifications are applied without depending on specific training types.