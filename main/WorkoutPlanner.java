package main;

import adapter.OldFitnessTracker;
import adapter.TrainingAdapter;
import command.AddTrainingCommand;
import command.StartTrainingCommand;
import command.TrainingCommand;
import command.TrainingInvoker;
import core.TrainingProgram;
import decorator.CoolDownDecorator;
import decorator.WarmUpDecorator;
import facade.WorkoutFacade;
import observer.Observer;
import observer.User;
import singleton.TrainingManager;
import strategy.TrainingFactory;
import strategy.TrainingStrategy;

public class WorkoutPlanner {
    private static TrainingInvoker invoker = new TrainingInvoker();
    private static TrainingProgram commandProgram = new TrainingProgram("Command-Based Program");

    public static void main(String[] args) {
        System.out.println("=== üèãÔ∏è‚Äç‚ôÄÔ∏è Workout Planner Started ===\n");

        // ‚úÖ Command Pattern
        TrainingCommand addPushups = new AddTrainingCommand(commandProgram, "–û—Ç–∂–∏–º–∞–Ω–∏—è");
        invoker.setCommand(addPushups);
        invoker.executeCommand();

        TrainingCommand startWorkout = new StartTrainingCommand(commandProgram);
        invoker.setCommand(startWorkout);
        invoker.executeCommand();

        // ‚úÖ Strategy + Factory Pattern
        TrainingStrategy cardio = TrainingFactory.createTraining("cardio");
        TrainingStrategy strength = TrainingFactory.createTraining("strength");
        TrainingStrategy hybrid = TrainingFactory.createTraining("hybrid");

        System.out.println("\nüéØ Using different training strategies:");
        cardio.train();
        strength.train();
        hybrid.train();

        // ‚úÖ observer.Observer Pattern
        TrainingProgram observerProgram = new TrainingProgram("Summer Fitness Challenge");
        Observer user1 = new User("Rami");
        Observer user2 = new User("Akzhan");

        observerProgram.addObserver(user1);
        observerProgram.addObserver(user2);

        System.out.println("\nüëÄ Notifying users about the new training program:");
        observerProgram.addTraining("–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"); // will auto-notify

        // ‚úÖ Decorator Pattern
        TrainingStrategy decoratedWorkout = new WarmUpDecorator(new CoolDownDecorator(TrainingFactory.createTraining("strength")));
        System.out.println("\n‚ú® Performing a decorated workout:");
        decoratedWorkout.train();

        // ‚úÖ Singleton Pattern
        TrainingManager manager = TrainingManager.getInstance();
        manager.manageTraining();

        // ‚úÖ Facade Pattern
        System.out.println("\nüèóÔ∏è Using Workout Facade:");
        WorkoutFacade facade = new WorkoutFacade();
        facade.startWorkout();
        facade.endWorkout();

        // ‚úÖ Adapter Pattern
        System.out.println("\nüîå Using Legacy System via Adapter:");
        OldFitnessTracker legacy = new OldFitnessTracker();
        TrainingProgram adapter = new TrainingAdapter(legacy);
        adapter.startTraining();
        adapter.addTraining("–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ");
        adapter.stopTraining();

        System.out.println("\n=== ‚úÖ Workout Planner Finished ===");
    }
}
